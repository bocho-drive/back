name: Bocho-community

on:
  push:
    branches: ["feature/nonstop"]
  pull_request:
    branches: ["develop"]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 깃헙 레포지토리에 올린 파일 불러오기
        uses: actions/checkout@v4

      - name : JDK 17버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: application.properties 파일 만들기
        run: echo "${{ secrets.APPLICATION_PROPERTIES }}" > src/main/resources/application.properties

      - name: gradlew 실행 권한 주기
        run: chmod +x gradlew

      - name: 테스트 및 빌드
        run: ./gradlew clean build

      - name: AWS Resource에 접근할 수 있게 AWS credentials 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to ECR
        id : login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker 로그인 확인
        run: echo ${{ steps.login-ecr.outputs.registry }}

      - name: Docker 이미지 생성
        run: docker build -t bocho-ecr .

      - name: Docker 이미지에 Tag 붙이기
        run: docker tag bocho-ecr ${{ steps.login-ecr.outputs.registry }}/bocho-ecr:latest

      - name : ECR에 도커 이미지 push
        run : docker push ${{ steps.login-ecr.outputs.registry }}/bocho-ecr:latest

      - name: Make zip file
        run: |
          mkdir deploy
          cp ./build/libs/*.jar ./deploy/
          zip -r -qq -j ./spring-build.zip ./deploy

      - name: Upload to S3
        run: |
          aws s3 cp \
            --region ap-northeast-2 \
            ./spring-build.zip s3://bocho-deploy


###
#      - name: Make zip file
#        run: zip -r ./<자신이 만들 ZIP 파일 이름>.zip .
#        shell: bash
#
#      # 만들어 놓은 S3에 해당 zip 파일 저장
#      - name: Upload to S3
#        run: aws s3 cp --region ${{ secrets.AWS_REGION }} ./<자신이 만든 ZIP 파일 이름>.zip s3://<만들어 놓은 버킷 이름>/<자신이 만든 ZIP 파일 이름>.zip
#
#      # AWS CodeDeploy에 배포
#      - name: Deploy
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#        run: |
#          aws deploy create-deployment \
#          --application-name <AWS codeDeploy 애플리케이션 이름> \
#          --deployment-group-name <codeDeploy group 이름> \
#          --file-exists-behavior OVERWRITE \
#          --s3-location bucket=<만들어 놓은 버킷 이름>,bundleType=zip,key=<자신이 만든 ZIP 파일 이름>.zip \
#          --region ${{ secrets.AWS_REGION }}


###
#
#
#      - name : 압축
#        run : tar -czvf $GITHUB_SHA.tar.gz appspec.yml scripts
#
#      - name: S3에 프로젝트 폴더 업로드하기
#        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.tar.gz s3://bocho-deploy/$GITHUB_SHA.tar.gz
#
#      - name: Code Deploy를 활용해 EC2에 프로젝트 코드 배포
#        run: aws deploy create-deployment
#          --application-name instagram-server
#          --deployment-config-name CodeDeployDefault.AllAtOnce
#          --deployment-group-name develop
#          --s3-location bucket=bocho-deploy,bundleType=tgz,key=$GITHUB_SHA.tar.gz