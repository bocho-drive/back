name: Bocho-community

on:
  push:
    branches: ["feature/nonstop"]
  pull_request:
    branches: ["develop"]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 깃헙 레포지토리에 올린 파일 불러오기
        uses: actions/checkout@v4

      - name : JDK 17버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: application.properties 파일 만들기
        run: echo "${{ secrets.APPLICATION_PROPERTIES }}" > src/main/resources/application.properties

      - name: gradlew 실행 권한 주기
        run: chmod +x gradlew

      - name: 테스트 및 빌드
        run: ./gradlew clean build

      - name: AWS Resource에 접근할 수 있게 AWS credentials 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to ECR
        id : login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker 로그인 확인
        run: echo ${{ steps.login-ecr.outputs.registry }}

      - name: Docker 이미지 생성
        run: docker build -t bocho-ecr .

      - name: Docker 이미지에 Tag 붙이기
        run: docker tag bocho-ecr ${{ steps.login-ecr.outputs.registry }}/bocho-ecr:latest

      - name : ECR에 도커 이미지 push
        run : docker push ${{ steps.login-ecr.outputs.registry }}/bocho-ecr:latest


      - name: connect to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          script: |
              echo "Checking current port..."
              CURRENT_PORT=$(docker inspect -f '{{ (index (index .NetworkSettings.Ports "3000/tcp") 0).HostPort }}' bocho-ecr || echo "3000")
              echo "Current port is: $CURRENT_PORT"
              
              if [ "$CURRENT_PORT" = "3000" ]; then
                echo "Current container is running on port 3000"
                NEW_PORT=3001
              elif [ "$CURRENT_PORT" = "3001" ]; then
                echo "Current container is running on port 3001"
                NEW_PORT=3000
              else
                echo "Unexpected current port: $CURRENT_PORT. Exiting."
                exit 1
              fi
              
              echo "New port selected: $NEW_PORT"
              
              if [ "$(docker ps -q -f name=bocho-ecr-${NEW_PORT})" ]; then
                echo "Stopping and removing existing container on port ${NEW_PORT}..."
                docker stop bocho-ecr-${NEW_PORT}
                docker rm bocho-ecr-${NEW_PORT}
              fi
              
              echo "Pulling the latest Docker image..."
              docker pull ${{ steps.login-ecr.outputs.registry }}/bocho-ecr:latest
              
              echo "Running new container on port ${NEW_PORT}..."
              docker run -d --name bocho-ecr-green -p ${NEW_PORT}:3000 ${{ steps.login-ecr.outputs.registry }}/bocho-ecr:latest
              
              echo "Stopping and removing the old container..."
              docker stop bocho-ecr || true
              docker rm bocho-ecr || true
              
              echo "Renaming new container to bocho-ecr..."
              docker rename bocho-ecr-green bocho-ecr
              
              echo "Deployment completed successfully."

