name: Bocho-community

on:
  push:
    branches: ["feature/nonstop"]
  pull_request:
    branches: ["develop"]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 깃헙 레포지토리에 올린 파일 불러오기
        uses: actions/checkout@v4

      - name : JDK 17버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: application.properties 파일 만들기
        run: echo "${{ secrets.APPLICATION_PROPERTIES }}" > src/main/resources/application.properties

      - name: gradlew 실행 권한 주기
        run: chmod +x gradlew

      - name: 테스트 및 빌드
        run: ./gradlew clean build

      - name: AWS Resource에 접근할 수 있게 AWS credentials 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to ECR
        id : login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker 로그인 확인
        run: echo ${{ steps.login-ecr.outputs.registry }}

      - name: Docker 이미지 생성
        run: docker build -t bocho-ecr .

      - name: Docker 이미지에 Tag 붙이기
        run: docker tag bocho-ecr ${{ steps.login-ecr.outputs.registry }}/bocho-ecr:latest

      - name : ECR에 도커 이미지 push
        run : docker push ${{ steps.login-ecr.outputs.registry }}/bocho-ecr:latest

      - name: connect to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          script: |
#            # Pull the latest Docker image
            docker pull ${{ steps.login-ecr.outputs.registry }}/bocho-ecr:latest

            # Run the new version in the Green environment (port 3001)
            docker run -d --name bocho-ecr-green -p 3001:3000 ${{ steps.login-ecr.outputs.registry }}/bocho-ecr:latest

            # Perform health checks on the Green environment
            # For example, wait and check if it's responding correctly
            sleep 10
            if curl -s http://localhost:3001 | grep "expected_content"; then
              echo "Green environment is healthy."

              # Update NGINX or load balancer configuration to point to the Green environment
              # Example for NGINX:
              sudo sed -i 's/:8080/:8081/' /etc/nginx/nginx.conf
              sudo systemctl reload nginx

              # Optionally, stop and remove the old Blue environment
              docker stop bocho-ecr || true
              docker rm bocho-ecr || true

              # Rename the Green container to take over the Blue container's role (if needed)
              docker rename bocho-ecr-green bocho-ecr
            
            else
              echo "Green environment failed to start, keeping Blue environment active."
              docker stop bocho-ecr-green || true
              docker rm bocho-ecr-green || true
            fi



#########
##            # 새로운 컨테이너 실행
#            docker pull ${{ steps.login-ecr.outputs.registry }}/bocho-ecr:latest
#            docker run -d --name bocho-ecr-green -p 3001:3000 ${{ steps.login-ecr.outputs.registry }}/bocho-ecr:latest
#
#
#            # 서비스가 정상인지 확인하는 로직을 여기에 추가할 수 있음
#            # 예를 들어, HTTP 요청을 통해 응답 확인 등...
#
#
#            # 기존 컨테이너(bocho-ecr) 중지
#            docker stop bocho-ecr || true
#
#            # 새 컨테이너의 포트를 3000으로 변경
#            docker rename bocho-ecr-green bocho-ecr
#            docker container update --publish 3000:3000 bocho-ecr
#
#            # 기존 컨테이너 삭제
#            docker rm bocho-ecr-old || true

#########
#            docker stop bocho-ecr || true
#            docker rm bocho-ecr || true
#            docker pull ${{ steps.login-ecr.outputs.registry }}/bocho-ecr:latest
#            docker run -d --name bocho-ecr -p 3000:3000 ${{ steps.login-ecr.outputs.registry }}/bocho-ecr:latest